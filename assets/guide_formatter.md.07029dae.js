import{_ as s,c as n,o as a,a as e}from"./app.2ec7a259.js";const C=JSON.parse('{"title":"Formatter","description":"","frontmatter":{},"headers":[{"level":2,"title":"EditorConfig","slug":"editorconfig"},{"level":2,"title":"Prettier","slug":"prettier"},{"level":3,"title":"JSON schema for config file","slug":"json-schema-for-config-file"}],"relativePath":"guide/formatter.md","lastUpdated":1661856279000}'),o={name:"guide/formatter.md"},l=e(`<h1 id="formatter" tabindex="-1">Formatter <a class="header-anchor" href="#formatter" aria-hidden="true">#</a></h1><h2 id="editorconfig" tabindex="-1">EditorConfig <a class="header-anchor" href="#editorconfig" aria-hidden="true">#</a></h2><p>[EditorConfig] helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs. The EditorConfig file defines the coding styles.</p><div class="language-ini"><button class="copy"></button><span class="lang">ini</span><pre><code><span class="line"><span style="color:#676E95;"># top-most EditorConfig file</span></span>
<span class="line"><span style="color:#F07178;">root</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#F07178;">charset</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> utf-8</span></span>
<span class="line"><span style="color:#F07178;">indent_style</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> space</span></span>
<span class="line"><span style="color:#F07178;">indent_size</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 2</span></span>
<span class="line"><span style="color:#F07178;">end_of_line</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> crlf</span></span>
<span class="line"><span style="color:#F07178;">insert_final_newline</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> true</span></span>
<span class="line"><span style="color:#F07178;">trim_trailing_whitespace</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> true</span></span>
<span class="line"><span style="color:#F07178;">max_line_length</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 80</span></span>
<span class="line"></span></code></pre></div><p>As all members of my team code on Windows, <code>end_of_line</code> is set to <code>crlf</code>. You may need to change it to <code>lf</code>.</p><h2 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-hidden="true">#</a></h2><p>Prettier is an opinionated code formatter which removes all original styling and ensures that all outputted code conforms to a consistent style. With <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noreferrer">Prettier for VSCode</a>, you can format you code on save.</p><p>Notice the Prettier config of Vitify Admin is very simple, as it <a href="https://prettier.io/docs/en/configuration.html#editorconfig" target="_blank" rel="noreferrer">inherits config from EditorConfig</a>.</p><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">singleQuote</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">semi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">editorconfig</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="json-schema-for-config-file" tabindex="-1">JSON schema for config file <a class="header-anchor" href="#json-schema-for-config-file" aria-hidden="true">#</a></h3><p>In order to obtain intellisense of config file which cannot be defined in TypeScript, like Prettier which does not allow <code>.prettierrc.ts</code>, we can profit <a href="https://code.visualstudio.com/docs/languages/json#_json-schemas-and-settings" target="_blank" rel="noreferrer">VSCode JSON schemas feature</a> to get auto-completion.</p><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#676E95;">// .vscode/settings.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">json.schemas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">fileMatch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/.prettierrc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://json.schemastore.org/prettierrc.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,12),t=[l];function p(r,c,i,D,y,F){return a(),n("div",null,t)}const f=s(o,[["render",p]]);export{C as __pageData,f as default};
