import{_ as e,c as t,o as r,a}from"./app.01a2db86.js";const m=JSON.parse('{"title":"Why Vitify","description":"","frontmatter":{},"headers":[{"level":2,"title":"The need for a Vue 2.7 starter template","slug":"the-need-for-a-vue-2-7-starter-template"},{"level":2,"title":"How is Vitify Admin Different from X","slug":"how-is-vitify-admin-different-from-x"},{"level":2,"title":"Preparation","slug":"preparation"}],"relativePath":"guide/why.md","lastUpdated":1661075145000}'),o={name:"guide/why.md"},i=a('<h1 id="why-vitify" tabindex="-1">Why Vitify <a class="header-anchor" href="#why-vitify" aria-hidden="true">#</a></h1><h2 id="the-need-for-a-vue-2-7-starter-template" tabindex="-1">The need for a Vue 2.7 starter template <a class="header-anchor" href="#the-need-for-a-vue-2-7-starter-template" aria-hidden="true">#</a></h2><p>I made this starter template for promptly scaffolding admin projects of my company, along with some good practices I&#39;ve learned during making these apps.</p><p>As TypeScript gets more and more popular, Volar becomes the new official VSCode extension of Vue. Vuetify 2, however, <a href="https://github.com/vuetifyjs/vuetify/issues/14798" target="_blank" rel="noreferrer">does not support Volar officially</a>. Therefore, I tried generating components types from <code>web-types</code> of Vuetify and successfully bring intellisense and type check to Vuetify project.</p><p>Currently, plenty of awesome Vue 2 librarys have not migrated to Vue 3 ecosystem, maybe never \u{1F62D}. There is still a long way to go before the release of version Vuetify v3.1 which includes all components of Vuetify 2. So I struggle with bridging perfect DX of Vue 3 to my Vuetify 2 projects. It&#39;s strongly opinionated, but hope it can help you to avoid detours.</p><h2 id="how-is-vitify-admin-different-from-x" tabindex="-1">How is Vitify Admin Different from X <a class="header-anchor" href="#how-is-vitify-admin-different-from-x" aria-hidden="true">#</a></h2><p>Vitify Admin is based on Vue 2 to profit the large part ecosystem of Vue 2 which has not support Vue 3 yet, while try backporting as much as possible the features from Vue 3 ecosystem. This is a concise starter template that works out of the box including only essential plugins and components from my perspective. It&#39;s up to you to add more features according to your purpose.</p><p>Here is a <a href="https://docs.nustarnuclear.com/vitify-slide/" target="_blank" rel="noreferrer">slide</a> I used to introduce this template to my colleagues, which is made by Slidev but in Chinese.</p><h2 id="preparation" tabindex="-1">Preparation <a class="header-anchor" href="#preparation" aria-hidden="true">#</a></h2><p>You need to install <a href="http://nodejs.org/" target="_blank" rel="noreferrer">node</a> and <a href="https://git-scm.com/" target="_blank" rel="noreferrer">git</a> locally. The project is based on ES2022, TypeScript, <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>, <a href="https://vuejs.org/" target="_blank" rel="noreferrer">Vue</a>, <a href="https://vuetifyjs.com/" target="_blank" rel="noreferrer">Vuetify</a>, <a href="https://pinia.vuejs.org/" target="_blank" rel="noreferrer">Pinia</a>, <a href="https://router.vuejs.org/" target="_blank" rel="noreferrer">Vue Router</a>, <a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a> and <a href="https://axios-http.com/docs/intro" target="_blank" rel="noreferrer">axios</a>, all request data is simulated using <a href="https://mswjs.io/" target="_blank" rel="noreferrer">Mock Service Worker</a>. Understanding and learning these knowledge in advance will greatly help the use of this project.</p>',10),s=[i];function n(l,h,f,d,p,c){return r(),t("div",null,s)}const y=e(o,[["render",n]]);export{m as __pageData,y as default};
