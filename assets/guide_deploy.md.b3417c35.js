import{_ as s,c as e,o as a,a as n}from"./app.df1da66b.js";const g=JSON.parse('{"title":"Build & Deploy","description":"","frontmatter":{},"headers":[{"level":2,"title":"Build","slug":"build","link":"#build","children":[{"level":3,"title":"Chunking Strategy","slug":"chunking-strategy","link":"#chunking-strategy","children":[]},{"level":3,"title":"Browser Compatibility","slug":"browser-compatibility","link":"#browser-compatibility","children":[]}]},{"level":2,"title":"Deploy","slug":"deploy","link":"#deploy","children":[{"level":3,"title":"GitHub Actions","slug":"github-actions","link":"#github-actions","children":[]},{"level":3,"title":"Netlify","slug":"netlify","link":"#netlify","children":[]}]}],"relativePath":"guide/deploy.md","lastUpdated":1679202940000}'),l={name:"guide/deploy.md"},o=n(`<h1 id="build-deploy" tabindex="-1">Build &amp; Deploy <a class="header-anchor" href="#build-deploy" aria-hidden="true">#</a></h1><h2 id="build" tabindex="-1">Build <a class="header-anchor" href="#build" aria-hidden="true">#</a></h2><p>When projects are completed, you can build your application with the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">pnpm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">build</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">pnpm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">build</span></span>
<span class="line"></span></code></pre></div><h3 id="chunking-strategy" tabindex="-1">Chunking Strategy <a class="header-anchor" href="#chunking-strategy" aria-hidden="true">#</a></h3><p>By default, we include the official <a href="https://vitejs.dev/guide/build.html#chunking-strategy" target="_blank" rel="noreferrer"><code>splitVendorChunkPlugin</code></a> to divide the chunks into <code>index</code> and <code>vendor</code>. However, it may not be a good solution for every Vite target use case. You can remove this plugin or customize the strategy according to your own case.</p><h3 id="browser-compatibility" tabindex="-1">Browser Compatibility <a class="header-anchor" href="#browser-compatibility" aria-hidden="true">#</a></h3><p>Browser compatibility consists of transpilation and polyfill. By specifying custom targets via the <a href="https://vitejs.dev/config/build-options.html#build-target" target="_blank" rel="noreferrer"><code>build.target</code> config options</a>, where the lowest target is <code>es2015</code>, Vite can handle the transpilation and transform syntax to what can be understand by the target browsers. You can make <code>build.target</code> auto-generated from your <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noreferrer"><code>browserslist</code></a> config via <a href="https://github.com/marcofugaro/browserslist-to-esbuild" target="_blank" rel="noreferrer"><code> browserslist-to-esbuild</code></a>.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">pnpm</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">add</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">browserslist-to-esbuild</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">-D</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">pnpm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">add</span><span style="color:#393A34;"> </span><span style="color:#B56959;">browserslist-to-esbuild</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">-D</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// vite.config.ts</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">browserslistToEsbuild</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7DAA;">&#39;</span><span style="color:#C98A7D;">browserslist-to-esbuild</span><span style="color:#C98A7DAA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">defineConfig</span><span style="color:#666666;">({</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">build</span><span style="color:#666666;">: { </span><span style="color:#B8A965;">target</span><span style="color:#666666;">: </span><span style="color:#80A665;">browserslistToEsbuild</span><span style="color:#666666;">() },</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">/* other settings */</span></span>
<span class="line"><span style="color:#666666;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// vite.config.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">browserslistToEsbuild</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">browserslist-to-esbuild</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineConfig</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">build</span><span style="color:#999999;">: { </span><span style="color:#998418;">target</span><span style="color:#999999;">: </span><span style="color:#59873A;">browserslistToEsbuild</span><span style="color:#999999;">() },</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">/* other settings */</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>For polyfills, there are two solutions. Vite recommend <a href="https://polyfill.io/v3/" target="_blank" rel="noreferrer">Polyfill.io</a> which is a service that automatically generates polyfill bundles based on the user&#39;s browser UserAgent string. However, it may not be a good solution if you are building product for instituts or governments which do not have access to internet, which is common for admin projects.</p><p>In Vitify Admin, we support legacy browsers via <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noreferrer"><code>@vitejs/plugin-legacy</code></a>, which will automatically generate legacy chunks and corresponding ES language feature polyfills. The legacy chunks are conditionally loaded only in browsers that do not have native ESM support.</p><p>Note that there are several issues with <code>@vitejs/plugin-legacy</code>, it doesn&#39;t read your <code>browserslist</code> config to decide the browsers to support, which is a long-lived bug <a href="https://github.com/vitejs/vite/issues/2476" target="_blank" rel="noreferrer">#2476</a>. You need to manually set <code>targets</code> in config of this plugin if you need to support legacy browsers. Secondly, <code>modernpolyfills</code> always targets to all browsers supporting ESM, no matter what <code>targets</code> in plugin config are set <a href="https://github.com/vitejs/vite/issues/6922" target="_blank" rel="noreferrer">#6922</a> . Thirdly, <code>@vitejs/plugin-legacy</code> always generates modern bundles. There is no way to make it only output the legacy bundles that support all target browsers (loaded via plain <code>&lt;script&gt;</code>s) <a href="https://github.com/vitejs/vite/issues/9050" target="_blank" rel="noreferrer">#9050</a>.</p><h4 id="check-whether-browser-is-supported-on-client-side" tabindex="-1">Check Whether Browser is Supported on Client Side <a class="header-anchor" href="#check-whether-browser-is-supported-on-client-side" aria-hidden="true">#</a></h4><p>Sometimes we want to test if the user&#39;s browser is supported by our application and give a warning if not. <a href="https://github.com/kingyue737/vite-plugin-browserslist-useragent/" target="_blank" rel="noreferrer"><code>vite-plugin-browserslist-useragent</code></a> can find if a given user agent match your browserslist query. You can remove this plugin if you don&#39;t need check browser client.</p><h2 id="deploy" tabindex="-1">Deploy <a class="header-anchor" href="#deploy" aria-hidden="true">#</a></h2><h3 id="github-actions" tabindex="-1">GitHub Actions <a class="header-anchor" href="#github-actions" aria-hidden="true">#</a></h3><p>Vitify Admin has already setuped <a href="https://github.com/features/actions" target="_blank" rel="noreferrer">GitHub Actions</a> for type checking, linting, unit testing and E2E testing in .</p><p>Once you push code to <code>main</code> branch or any pull request is created for <code>main</code> branch, GitHub will automate the workflows for you.</p><h4 id="cypress-dashboard" tabindex="-1">Cypress Dashboard <a class="header-anchor" href="#cypress-dashboard" aria-hidden="true">#</a></h4><p>The <a href="https://dashboard.cypress.io/" target="_blank" rel="noreferrer">Cypress Dashboard</a> Service is an optional web-based companion to the Cypress app. It provides timely, simple and powerful insights on all your tests run at a glance.</p><p>Go to Cypress Dashboard, create a new project and add its <code>projectId</code> as <code>\${CYPRESS_PROJECT_ID}</code>, its <code>record key</code> as <code>$CYPRESS_RECORD_KEY</code> in your repositry secrets (<a href="https://github.com/your-name/project-name/settings/secrets/actions" target="_blank" rel="noreferrer">https://github.com/your-name/project-name/settings/secrets/actions</a>).</p><p>If you don&#39;t want to use Cypress Dashboard, remove <code>record: true</code> and the entire <code>env</code> block from <a href="https://github.com/kingyue737/vitify-admin/blob/main/.github/workflows/ci.yml" target="_blank" rel="noreferrer"><code>.github/workflows/ci.yml</code></a>:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki vitesse-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#666666;">-</span><span style="color:#DBD7CAEE;"> </span><span style="color:#B8A965;">name</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">Cypress</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#B8A965;">uses</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">cypress-io/github-action@v4</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#B8A965;">with</span><span style="color:#666666;">:</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">install-command</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">echo</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">build</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">pnpm run build</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">start</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">pnpm run preview</span></span>
<span class="line highlighted"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">record</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">command-prefix</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7DAA;">&#39;</span><span style="color:#C98A7D;">--</span><span style="color:#C98A7DAA;">&#39;</span></span>
<span class="line highlighted"><span style="color:#DBD7CAEE;">  </span><span style="color:#B8A965;">env</span><span style="color:#666666;">:</span></span>
<span class="line highlighted"><span style="color:#666666;">    </span><span style="color:#758575DD;"># pass the Dashboard record key as an environment variable</span></span>
<span class="line highlighted"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">CYPRESS_RECORD_KEY</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">\${{ secrets.CYPRESS_RECORD_KEY }}</span></span>
<span class="line highlighted"><span style="color:#666666;">    </span><span style="color:#758575DD;"># pass GitHub token to allow accurately detecting a build vs a re-run build</span></span>
<span class="line highlighted"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">GITHUB_TOKEN</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">\${{ secrets.GITHUB_TOKEN }}</span></span>
<span class="line highlighted"><span style="color:#666666;">    </span><span style="color:#758575DD;"># pass the project ID from the secrets through environment variable</span></span>
<span class="line highlighted"><span style="color:#DBD7CAEE;">    </span><span style="color:#B8A965;">CYPRESS_PROJECT_ID</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">\${{ secrets.CYPRESS_PROJECT_ID }}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#999999;">-</span><span style="color:#393A34;"> </span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">Cypress</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">uses</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">cypress-io/github-action@v4</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">with</span><span style="color:#999999;">:</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">install-command</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">echo</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">build</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">pnpm run build</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">start</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">pnpm run preview</span></span>
<span class="line highlighted"><span style="color:#393A34;">    </span><span style="color:#998418;">record</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">command-prefix</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">--</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line highlighted"><span style="color:#393A34;">  </span><span style="color:#998418;">env</span><span style="color:#999999;">:</span></span>
<span class="line highlighted"><span style="color:#999999;">    </span><span style="color:#A0ADA0;"># pass the Dashboard record key as an environment variable</span></span>
<span class="line highlighted"><span style="color:#393A34;">    </span><span style="color:#998418;">CYPRESS_RECORD_KEY</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">\${{ secrets.CYPRESS_RECORD_KEY }}</span></span>
<span class="line highlighted"><span style="color:#999999;">    </span><span style="color:#A0ADA0;"># pass GitHub token to allow accurately detecting a build vs a re-run build</span></span>
<span class="line highlighted"><span style="color:#393A34;">    </span><span style="color:#998418;">GITHUB_TOKEN</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">\${{ secrets.GITHUB_TOKEN }}</span></span>
<span class="line highlighted"><span style="color:#999999;">    </span><span style="color:#A0ADA0;"># pass the project ID from the secrets through environment variable</span></span>
<span class="line highlighted"><span style="color:#393A34;">    </span><span style="color:#998418;">CYPRESS_PROJECT_ID</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959;">\${{ secrets.CYPRESS_PROJECT_ID }}</span></span>
<span class="line"></span></code></pre></div><p>GitHub actions will still run E2E testing for you, but you can no longer watch the video and screenshots of tests.</p><h3 id="netlify" tabindex="-1">Netlify <a class="header-anchor" href="#netlify" aria-hidden="true">#</a></h3><p>The <a href="https://vitify-admin.netlify.app" target="_blank" rel="noreferrer">online demo</a> of Vitify Admin is deployed by Netlify. All you need to deploy your own app online is to go to <a href="https://app.netlify.com/start" target="_blank" rel="noreferrer">Netlify</a> and select your clone, <code>OK</code> along the way, and your app will be live in a minute. Deploy config <a href="https://github.com/kingyue737/vitify-admin/blob/main/netlify.toml" target="_blank" rel="noreferrer"><code>netlify.toml</code></a> has already been included in this template.</p>`,27),t=[o];function p(r,i,c,d,y,h){return a(),e("div",null,t)}const b=s(l,[["render",p]]);export{g as __pageData,b as default};
