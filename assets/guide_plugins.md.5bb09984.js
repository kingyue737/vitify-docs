import{_ as s,c as n,o as a,a as l}from"./app.e781c04a.js";const A=JSON.parse('{"title":"Plugins","description":"","frontmatter":{},"headers":[],"relativePath":"guide/plugins.md","lastUpdated":1660322115000}'),e={name:"guide/plugins.md"},o=l(`<h1 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h1><p>All the TypeScript source files in <code>src/plugins</code> folder will be auto imported. This is a custom user plugin system. Place a <code>.ts</code> file with the following template, it will be installed automatically.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">InstallPlugin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/utils/types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> install</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InstallPlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The advantage of wrap install logic and global registeration in a function which receive a <code>Vue</code> instance, instead of directly call</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Vue.use(Plugin)</span></span>
<span class="line"><span style="color:#A6ACCD;">// or</span></span>
<span class="line"><span style="color:#A6ACCD;">Vue.component(MyComponent)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>is not only for auto importing. We can reuse them in unit/component testing setup. As in testing, we should install plugins on a <code>localVue</code> instead of global vue instance. For example, reuse the same I18n config of application code in unit testing (refer to more information in <a href="./testing.html">testing section</a>):</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// vue-test-utils</span></span>
<span class="line"></span></code></pre></div>`,7),p=[o];function t(c,i,r,y,d,D){return a(),n("div",null,p)}var C=s(e,[["render",t]]);export{A as __pageData,C as default};
